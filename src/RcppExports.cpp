// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// calAv_cpp
arma::mat calAv_cpp(const arma::vec& v, const arma::mat& X);
RcppExport SEXP _Palette_calAv_cpp(SEXP vSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(calAv_cpp(v, X));
    return rcpp_result_gen;
END_RCPP
}
// GetS
arma::mat GetS(const arma::mat& X, const arma::sp_mat& K, const arma::vec& DVec, double lambda, size_t batch_size);
RcppExport SEXP _Palette_GetS(SEXP XSEXP, SEXP KSEXP, SEXP DVecSEXP, SEXP lambdaSEXP, SEXP batch_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type DVec(DVecSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< size_t >::type batch_size(batch_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(GetS(X, K, DVec, lambda, batch_size));
    return rcpp_result_gen;
END_RCPP
}
// GetS_new
arma::mat GetS_new(const arma::mat& X, const arma::sp_mat& K, const arma::sp_mat& B, double& lambda, size_t batch_size);
RcppExport SEXP _Palette_GetS_new(SEXP XSEXP, SEXP KSEXP, SEXP BSEXP, SEXP lambdaSEXP, SEXP batch_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< size_t >::type batch_size(batch_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(GetS_new(X, K, B, lambda, batch_size));
    return rcpp_result_gen;
END_RCPP
}
// Getmat
arma::mat Getmat(const arma::mat& X, const arma::sp_mat& K, const arma::sp_mat& B, size_t batch_size);
RcppExport SEXP _Palette_Getmat(SEXP XSEXP, SEXP KSEXP, SEXP BSEXP, SEXP batch_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< size_t >::type batch_size(batch_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(Getmat(X, K, B, batch_size));
    return rcpp_result_gen;
END_RCPP
}
// FindMedian_self
arma::mat FindMedian_self(const arma::mat& X, std::vector<IntegerVector>& idx);
RcppExport SEXP _Palette_FindMedian_self(SEXP XSEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< std::vector<IntegerVector>& >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(FindMedian_self(X, idx));
    return rcpp_result_gen;
END_RCPP
}
// FindMedian
arma::mat FindMedian(const arma::mat& X, std::vector<IntegerVector>& idx1, std::vector<IntegerVector>& idx2);
RcppExport SEXP _Palette_FindMedian(SEXP XSEXP, SEXP idx1SEXP, SEXP idx2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< std::vector<IntegerVector>& >::type idx1(idx1SEXP);
    Rcpp::traits::input_parameter< std::vector<IntegerVector>& >::type idx2(idx2SEXP);
    rcpp_result_gen = Rcpp::wrap(FindMedian(X, idx1, idx2));
    return rcpp_result_gen;
END_RCPP
}
// PairwiseKernel_norm
List PairwiseKernel_norm(const arma::mat& sim, const arma::mat& groupsim, std::vector<IntegerVector>& idx1, std::vector<IntegerVector>& idx2, const int& seed);
RcppExport SEXP _Palette_PairwiseKernel_norm(SEXP simSEXP, SEXP groupsimSEXP, SEXP idx1SEXP, SEXP idx2SEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type sim(simSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type groupsim(groupsimSEXP);
    Rcpp::traits::input_parameter< std::vector<IntegerVector>& >::type idx1(idx1SEXP);
    Rcpp::traits::input_parameter< std::vector<IntegerVector>& >::type idx2(idx2SEXP);
    Rcpp::traits::input_parameter< const int& >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(PairwiseKernel_norm(sim, groupsim, idx1, idx2, seed));
    return rcpp_result_gen;
END_RCPP
}
// Insert_submat
arma::sp_mat Insert_submat(arma::sp_mat& X, std::vector<arma::sp_mat>& submat, IntegerVector& idx, const bool& scale, const double& scaler);
RcppExport SEXP _Palette_Insert_submat(SEXP XSEXP, SEXP submatSEXP, SEXP idxSEXP, SEXP scaleSEXP, SEXP scalerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::sp_mat>& >::type submat(submatSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const bool& >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< const double& >::type scaler(scalerSEXP);
    rcpp_result_gen = Rcpp::wrap(Insert_submat(X, submat, idx, scale, scaler));
    return rcpp_result_gen;
END_RCPP
}
// SubKernel
List SubKernel(const arma::vec& x, const arma::vec& p, const arma::vec& i, const arma::vec& q, int k);
RcppExport SEXP _Palette_SubKernel(SEXP xSEXP, SEXP pSEXP, SEXP iSEXP, SEXP qSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type i(iSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(SubKernel(x, p, i, q, k));
    return rcpp_result_gen;
END_RCPP
}
// FindGroupLink
arma::mat FindGroupLink(const arma::mat& X, const arma::mat& row_mat, const arma::mat& col_mat, const double Angle_var, const double max_Angle);
RcppExport SEXP _Palette_FindGroupLink(SEXP XSEXP, SEXP row_matSEXP, SEXP col_matSEXP, SEXP Angle_varSEXP, SEXP max_AngleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type row_mat(row_matSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type col_mat(col_matSEXP);
    Rcpp::traits::input_parameter< const double >::type Angle_var(Angle_varSEXP);
    Rcpp::traits::input_parameter< const double >::type max_Angle(max_AngleSEXP);
    rcpp_result_gen = Rcpp::wrap(FindGroupLink(X, row_mat, col_mat, Angle_var, max_Angle));
    return rcpp_result_gen;
END_RCPP
}
// sKernel_norm
List sKernel_norm(const std::vector<int>& N_list, const int& N, const int& clust, std::vector<std::vector<IntegerVector>>& idx);
RcppExport SEXP _Palette_sKernel_norm(SEXP N_listSEXP, SEXP NSEXP, SEXP clustSEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int>& >::type N_list(N_listSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type clust(clustSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<IntegerVector>>& >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(sKernel_norm(N_list, N, clust, idx));
    return rcpp_result_gen;
END_RCPP
}
// modal_infer_one_one
List modal_infer_one_one(const arma::mat& X, const arma::mat& Y, const int& k, const bool& L2, const arma::mat& Z, const arma::mat& T, const bool& do_scaler, const int& scaler_k, const bool& do_var, const int& var_k);
RcppExport SEXP _Palette_modal_infer_one_one(SEXP XSEXP, SEXP YSEXP, SEXP kSEXP, SEXP L2SEXP, SEXP ZSEXP, SEXP TSEXP, SEXP do_scalerSEXP, SEXP scaler_kSEXP, SEXP do_varSEXP, SEXP var_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const bool& >::type L2(L2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const bool& >::type do_scaler(do_scalerSEXP);
    Rcpp::traits::input_parameter< const int& >::type scaler_k(scaler_kSEXP);
    Rcpp::traits::input_parameter< const bool& >::type do_var(do_varSEXP);
    Rcpp::traits::input_parameter< const int& >::type var_k(var_kSEXP);
    rcpp_result_gen = Rcpp::wrap(modal_infer_one_one(X, Y, k, L2, Z, T, do_scaler, scaler_k, do_var, var_k));
    return rcpp_result_gen;
END_RCPP
}
// modal_infer_one_multi
List modal_infer_one_multi(const std::vector<arma::mat>& X, const std::vector<arma::mat>& Y, const int& k, const bool& L2, const arma::mat& Z, const arma::mat& T, const bool& do_scaler, const int& scaler_k, const bool& do_var, const int& var_k);
RcppExport SEXP _Palette_modal_infer_one_multi(SEXP XSEXP, SEXP YSEXP, SEXP kSEXP, SEXP L2SEXP, SEXP ZSEXP, SEXP TSEXP, SEXP do_scalerSEXP, SEXP scaler_kSEXP, SEXP do_varSEXP, SEXP var_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<arma::mat>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::mat>& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const bool& >::type L2(L2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const bool& >::type do_scaler(do_scalerSEXP);
    Rcpp::traits::input_parameter< const int& >::type scaler_k(scaler_kSEXP);
    Rcpp::traits::input_parameter< const bool& >::type do_var(do_varSEXP);
    Rcpp::traits::input_parameter< const int& >::type var_k(var_kSEXP);
    rcpp_result_gen = Rcpp::wrap(modal_infer_one_multi(X, Y, k, L2, Z, T, do_scaler, scaler_k, do_var, var_k));
    return rcpp_result_gen;
END_RCPP
}
// modal_infer_multi_one
List modal_infer_multi_one(const arma::mat& X, const std::vector<std::vector<arma::mat>>& Y, const int& k, const bool& L2, const arma::mat& Z, const arma::mat& T, const bool& do_scaler, const int& scaler_k, const bool& do_var, const int& var_k);
RcppExport SEXP _Palette_modal_infer_multi_one(SEXP XSEXP, SEXP YSEXP, SEXP kSEXP, SEXP L2SEXP, SEXP ZSEXP, SEXP TSEXP, SEXP do_scalerSEXP, SEXP scaler_kSEXP, SEXP do_varSEXP, SEXP var_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<arma::mat>>& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const bool& >::type L2(L2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const bool& >::type do_scaler(do_scalerSEXP);
    Rcpp::traits::input_parameter< const int& >::type scaler_k(scaler_kSEXP);
    Rcpp::traits::input_parameter< const bool& >::type do_var(do_varSEXP);
    Rcpp::traits::input_parameter< const int& >::type var_k(var_kSEXP);
    rcpp_result_gen = Rcpp::wrap(modal_infer_multi_one(X, Y, k, L2, Z, T, do_scaler, scaler_k, do_var, var_k));
    return rcpp_result_gen;
END_RCPP
}
// modal_infer_multi_multi
List modal_infer_multi_multi(const std::vector<arma::mat>& X, const std::vector<std::vector<std::vector<arma::mat>>>& Y, const int& k, const bool& L2, const arma::mat& Z, const arma::mat& T, const bool& do_scaler, const int& scaler_k, const bool& do_var, const int& var_k);
RcppExport SEXP _Palette_modal_infer_multi_multi(SEXP XSEXP, SEXP YSEXP, SEXP kSEXP, SEXP L2SEXP, SEXP ZSEXP, SEXP TSEXP, SEXP do_scalerSEXP, SEXP scaler_kSEXP, SEXP do_varSEXP, SEXP var_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<arma::mat>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<std::vector<arma::mat>>>& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const bool& >::type L2(L2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const bool& >::type do_scaler(do_scalerSEXP);
    Rcpp::traits::input_parameter< const int& >::type scaler_k(scaler_kSEXP);
    Rcpp::traits::input_parameter< const bool& >::type do_var(do_varSEXP);
    Rcpp::traits::input_parameter< const int& >::type var_k(var_kSEXP);
    rcpp_result_gen = Rcpp::wrap(modal_infer_multi_multi(X, Y, k, L2, Z, T, do_scaler, scaler_k, do_var, var_k));
    return rcpp_result_gen;
END_RCPP
}
// elementwiseMultiplySp
arma::sp_mat elementwiseMultiplySp(const arma::sp_mat& A, const arma::sp_mat& B);
RcppExport SEXP _Palette_elementwiseMultiplySp(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(elementwiseMultiplySp(A, B));
    return rcpp_result_gen;
END_RCPP
}
// filter_SNN
arma::sp_mat filter_SNN(arma::sp_mat& SNN, std::vector<IntegerVector>& idx, const std::vector<CharacterVector>& meta_list);
RcppExport SEXP _Palette_filter_SNN(SEXP SNNSEXP, SEXP idxSEXP, SEXP meta_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type SNN(SNNSEXP);
    Rcpp::traits::input_parameter< std::vector<IntegerVector>& >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const std::vector<CharacterVector>& >::type meta_list(meta_listSEXP);
    rcpp_result_gen = Rcpp::wrap(filter_SNN(SNN, idx, meta_list));
    return rcpp_result_gen;
END_RCPP
}
// K_SNN
List K_SNN(arma::sp_mat& SNN, std::vector<IntegerVector>& idx, const int& k, const double& lambda);
RcppExport SEXP _Palette_K_SNN(SEXP SNNSEXP, SEXP idxSEXP, SEXP kSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type SNN(SNNSEXP);
    Rcpp::traits::input_parameter< std::vector<IntegerVector>& >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(K_SNN(SNN, idx, k, lambda));
    return rcpp_result_gen;
END_RCPP
}
// silhouette_cpp
arma::vec silhouette_cpp(const arma::vec& labels, const arma::mat& X);
RcppExport SEXP _Palette_silhouette_cpp(SEXP labelsSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type labels(labelsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(silhouette_cpp(labels, X));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Palette_calAv_cpp", (DL_FUNC) &_Palette_calAv_cpp, 2},
    {"_Palette_GetS", (DL_FUNC) &_Palette_GetS, 5},
    {"_Palette_GetS_new", (DL_FUNC) &_Palette_GetS_new, 5},
    {"_Palette_Getmat", (DL_FUNC) &_Palette_Getmat, 4},
    {"_Palette_FindMedian_self", (DL_FUNC) &_Palette_FindMedian_self, 2},
    {"_Palette_FindMedian", (DL_FUNC) &_Palette_FindMedian, 3},
    {"_Palette_PairwiseKernel_norm", (DL_FUNC) &_Palette_PairwiseKernel_norm, 5},
    {"_Palette_Insert_submat", (DL_FUNC) &_Palette_Insert_submat, 5},
    {"_Palette_SubKernel", (DL_FUNC) &_Palette_SubKernel, 5},
    {"_Palette_FindGroupLink", (DL_FUNC) &_Palette_FindGroupLink, 5},
    {"_Palette_sKernel_norm", (DL_FUNC) &_Palette_sKernel_norm, 4},
    {"_Palette_modal_infer_one_one", (DL_FUNC) &_Palette_modal_infer_one_one, 10},
    {"_Palette_modal_infer_one_multi", (DL_FUNC) &_Palette_modal_infer_one_multi, 10},
    {"_Palette_modal_infer_multi_one", (DL_FUNC) &_Palette_modal_infer_multi_one, 10},
    {"_Palette_modal_infer_multi_multi", (DL_FUNC) &_Palette_modal_infer_multi_multi, 10},
    {"_Palette_elementwiseMultiplySp", (DL_FUNC) &_Palette_elementwiseMultiplySp, 2},
    {"_Palette_filter_SNN", (DL_FUNC) &_Palette_filter_SNN, 3},
    {"_Palette_K_SNN", (DL_FUNC) &_Palette_K_SNN, 4},
    {"_Palette_silhouette_cpp", (DL_FUNC) &_Palette_silhouette_cpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_Palette(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
